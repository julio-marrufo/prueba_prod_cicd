AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Aplicación Serverless que utiliza infraestructura AWS existente

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Tracing: Active
    Environment:
      Variables:
        LOG_LEVEL: INFO

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, test, stage, prod]
    Description: Entorno de despliegue

  MongoDbUri:
    Type: String
    NoEcho: true
    Description: URI de conexión a MongoDB Atlas

  DatabaseName:
    Type: String
    Default: sampledb
    Description: Nombre de la base de datos MongoDB

  CollectionName:
    Type: String
    Default: samples
    Description: Nombre de la colección MongoDB

  ApiGatewayType:
    Type: String
    Default: http
    AllowedValues: [http, rest]
    Description: Tipo de API Gateway existente

  ExistingApiId:
    Type: String
    Description: ID de la API Gateway existente

  ExistingApiStageName:
    Type: String
    Default: dev
    Description: Nombre del stage de la API Gateway existente

  ExistingVpcId:
    Type: String
    Description: ID de la VPC existente

  ExistingSubnetIds:
    Type: CommaDelimitedList
    Description: Lista separada por comas de IDs de subredes existentes

  ExistingSecurityGroupId:
    Type: String
    Description: ID del grupo de seguridad existente

  ExistingLayerArn:
    Type: String
    Description: ARN de la capa (layer) existente con las dependencias

Mappings:
  EnvironmentMap:
    dev:
      LogLevel: DEBUG
      MemorySize: 128
      Timeout: 10
    test:
      LogLevel: DEBUG
      MemorySize: 128
      Timeout: 10
    stage:
      LogLevel: INFO
      MemorySize: 256
      Timeout: 15
    prod:
      LogLevel: WARN
      MemorySize: 512
      Timeout: 30

Conditions:
  IsRestApi: !Equals [!Ref ApiGatewayType, "rest"]
  IsHttpApi: !Equals [!Ref ApiGatewayType, "http"]

Resources:
  # Secreto para MongoDB
  MongoDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-mongodb-${Environment}'
      Description: Credenciales de MongoDB
      SecretString: !Sub '{"uri": "${MongoDbUri}"}'

  # Función Lambda
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-${Environment}'
      CodeUri: prueba-ci-cd/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures: [x86_64]
      MemorySize: !FindInMap [EnvironmentMap, !Ref Environment, MemorySize]
      Timeout: !FindInMap [EnvironmentMap, !Ref Environment, Timeout]
      Environment:
        Variables:
          MONGODB_SECRET_ARN: !Ref MongoDBSecret
          DB_NAME: !Ref DatabaseName
          COLLECTION_NAME: !Ref CollectionName
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: !FindInMap [EnvironmentMap, !Ref Environment, LogLevel]
      VpcConfig:
        SecurityGroupIds:
          - !Ref ExistingSecurityGroupId
        SubnetIds: !Ref ExistingSubnetIds
      Layers:
        - !Ref ExistingLayerArn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
              Resource: !Ref MongoDBSecret

  # Grupo de logs para Lambda
  HelloWorldFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HelloWorldFunction}'
      RetentionInDays: 7

  # Integración con API Gateway HTTP existente
  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: IsHttpApi
    Properties:
      ApiId: !Ref ExistingApiId
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      IntegrationMethod: POST

  # Ruta para API Gateway HTTP
  # Usamos una ruta única para evitar conflictos con rutas existentes
  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Condition: IsHttpApi
    Properties:
      ApiId: !Ref ExistingApiId
      RouteKey: 'GET /hello-new'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'

  # Permiso para que API Gateway invoque la función Lambda
  ApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloWorldFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/*/hello-new'

Outputs:
  HelloWorldFunction:
    Description: ARN de la función Lambda
    Value: !GetAtt HelloWorldFunction.Arn

  ApiEndpoint:
    Description: URL del endpoint
    Value: !Sub 'https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/${ExistingApiStageName}/hello-new'