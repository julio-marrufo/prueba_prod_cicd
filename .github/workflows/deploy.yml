name: Deploy Serverless Application

on:
  push:
    branches: [master, develop, 'release/*']
  pull_request:
    branches: [master, develop]

permissions:
  id-token: write  # Necesario para OIDC
  contents: read   # Necesario para checkout

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || startsWith(github.ref, 'refs/heads/release/') && 'stage' || 'test' }}

    steps:
      # Debug para verificar la configuración
      - name: Debug Environment Variables
        run: |
          echo "GitHub Variables:"
          echo "AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}"
          echo "AWS_REGION: ${{ vars.AWS_REGION }}"
          echo "STACK_NAME: ${{ vars.STACK_NAME }}"
          echo "ENVIRONMENT: ${{ vars.ENVIRONMENT }}"
          
          echo "GitHub Context Information:"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Workflow: ${{ github.workflow }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock boto3
          pip install -r prueba_ci_cd/requirements.txt

      - name: Run tests
        run: |
          python -m pytest tests/unit/

      - name: Configure AWS credentials with OIDC
        if: github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      # Agregar el ROOTRESOURCEID de la API REST al Parameter Store si no existe
      - name: Check and store API Root Resource ID
        if: github.event_name == 'push' && vars.API_GATEWAY_TYPE == 'rest'
        run: |
          # Verificar si ya existe el parámetro en SSM
          PARAM_EXISTS=$(aws ssm get-parameter --name "/apigateway/${{ vars.EXISTING_API_ID }}/rootresourceid" --query "Parameter.Name" --output text 2>/dev/null || echo "NOT_FOUND")
          
          if [[ $PARAM_EXISTS == "NOT_FOUND" ]]; then
            echo "Parameter not found, retrieving root resource ID from API Gateway"
            # Obtener el ID del recurso raíz
            ROOT_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id ${{ vars.EXISTING_API_ID }} --query "items[?path=='/'].id" --output text)
            
            if [[ -n "$ROOT_RESOURCE_ID" ]]; then
              # Guardar el ID en Parameter Store
              aws ssm put-parameter --name "/apigateway/${{ vars.EXISTING_API_ID }}/rootresourceid" --value "$ROOT_RESOURCE_ID" --type "String"
              echo "Stored root resource ID: $ROOT_RESOURCE_ID"
            else
              echo "Failed to retrieve root resource ID!"
              exit 1
            fi
          else
            echo "Root resource ID parameter already exists in SSM"
          fi

      - name: Check and delete failed stack if needed
        if: github.event_name == 'push'
        run: |
          # Check if stack exists and is in a failed state
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${{ vars.STACK_NAME }}-${{ vars.ENVIRONMENT }} --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "STACK_NOT_FOUND")
          
          # If stack is in a failed state, delete it
          if [[ $STACK_STATUS == *"FAILED"* || $STACK_STATUS == *"ROLLBACK"* ]]; then
            echo "Stack is in $STACK_STATUS state. Deleting..."
            aws cloudformation delete-stack --stack-name ${{ vars.STACK_NAME }}-${{ vars.ENVIRONMENT }}
            aws cloudformation wait stack-delete-complete --stack-name ${{ vars.STACK_NAME }}-${{ vars.ENVIRONMENT }}
            echo "Stack deleted successfully."
          elif [[ $STACK_STATUS != "STACK_NOT_FOUND" ]]; then
            echo "Stack exists and is in $STACK_STATUS state."
          else
            echo "Stack does not exist yet."
          fi

      - name: Install AWS SAM CLI
        if: github.event_name == 'push'
        run: |
          pip install aws-sam-cli

      - name: Build with SAM
        if: github.event_name == 'push'
        run: |
          sam build

      - name: Deploy with SAM
        if: github.event_name == 'push'
        run: |
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name ${{ vars.STACK_NAME }}-${{ vars.ENVIRONMENT }} --resolve-s3 --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --parameter-overrides Environment=${{ vars.ENVIRONMENT }} MongoDbUri=${{ secrets.MONGODB_URI }} DatabaseName=${{ vars.DATABASE_NAME }} CollectionName=${{ vars.COLLECTION_NAME }} ApiGatewayType=${{ vars.API_GATEWAY_TYPE }} ExistingApiId=${{ vars.EXISTING_API_ID }} ExistingApiStageName=${{ vars.EXISTING_API_STAGE_NAME }} ExistingVpcId=${{ vars.EXISTING_VPC_ID }} ExistingSubnetIds=${{ vars.EXISTING_SUBNET_IDS }} ExistingSecurityGroupId=${{ vars.EXISTING_SECURITY_GROUP_ID }} ExistingLayerArn=${{ vars.EXISTING_LAYER_ARN }}